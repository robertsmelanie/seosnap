OPENAI_API_KEY=your-api-key-here

# Next, let's update the popup.js to call our Express backend instead of directly using OpenAI.
# Updated popup.js (Using Express Backend)
# js
# Copy
# Edit
# document.getElementById("analyzeBtn").addEventListener("click", () => {
#   chrome.tabs.query({ active: true, currentWindow: true }, ([tab]) => {
#     chrome.scripting.executeScript({
#       target: { tabId: tab.id },
#       func: () => document.documentElement.outerHTML
#     }, async ([{ result: html }]) => {
#       // Call your Express backend
#       try {
#         const response = await fetch("http://localhost:3000/analyze", {
#           method: "POST",
#           headers: { "Content-Type": "application/json" },
#           body: JSON.stringify({ html })
#         });

#         const data = await response.json();

#         document.getElementById("result").innerText = data.summary || "No response from server.";
#       } catch (err) {
#         console.error("Error:", err);
#         document.getElementById("result").innerText = "‚ùå Failed to contact SEO API.";
#       }
#     });
#   });
# });
# ‚ö†Ô∏è Ensure CORS Is Enabled in Express
# Your backend (index.js) must include this:

# js
# Copy
# Edit
# const cors = require("cors");
# app.use(cors());
# Otherwise Chrome will block the request from your extension.

# üîÅ Recap: Test the Flow
# Start your Express API:

# bash
# Copy
# Edit
# node index.js
# # or
# npx nodemon index.js
# Load or reload your Chrome extension (chrome://extensions)

# Visit any webpage (e.g., blog post)

# Click the extension ‚Üí Click "Analyze Page"

# üéØ You should see an SEO summary from OpenAI via your backend